from scapy.all import sniff, IP, TCP, Raw
import hashlib
import re
import json

# Load known malware hashes from the JSON file
def load_malware_signatures(file_path):
    with open(file_path, 'r') as f:
        return json.load(f)['signatures']

# Function to compute the hash of the HTTP body (downloaded file)
def compute_hash(data):
    return hashlib.md5(data).hexdigest()

# Callback function for captured packets
def packet_callback(packet, malware_signatures):
    # print("Detect malware")

    if packet.haslayer(Raw):  # Check if the packet has a Raw layer (likely contains HTTP data)
        # print("iinside mwlare packet layer")
        payload = packet[Raw].load
        
        # Search for file extensions that may indicate a malicious file
        suspicious_file_extensions = [b'.exe', b'.zip', b'.pdf', b'.dll', b'.js', b'.doc', b'.bat', b'.scr']

        # print("After suspicion extension")
        # for extension in suspicious_file_extensions:
        #     # print("checking extension")
        #     # print("malware payload",payload)
        #     if extension in payload:
        #         print(f"[*] Potential malware download detected in HTTP response! File extension: {extension.decode()}")
                
                # Extract and hash the payload (or specific file content)
        file_hash = compute_hash(payload)
        # print(f"[*] Hash of downloaded file: {file_hash}")
                
                # Compare hash with known malware hashes from JSON
        for signature in malware_signatures:
            if file_hash == signature['hash']:
                print(f"[ALERT] Malicious file detected! Tag: {signature['tag']}, Type: {signature['file_type']}\n")
                return True
                

# Main function to sniff HTTP packets and detect malware
# def main():

#     print("Listening to HTTP responses...........\n")
#     # Load malware signatures from JSON file
#     malware_signatures = load_malware_signatures('malware_signatures.json')
    
#     # Capture HTTP packets (port 8080 in this case)
#     sniff(filter="tcp port 8080", iface="lo", prn=lambda pkt: packet_callback(pkt, malware_signatures), store=0)

# if __name__ == "__main__":
#     main()
